import sys
import base64
import hashlib
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

def key_to_32_bytes(input_str):
    return hashlib.sha256(input_str.encode()).digest()

def decrypt(enc_key, enc_data):
    enc = base64.b64decode(enc_data)
    nonce_size = 12
    tag_size = 16
    nonce = enc[:nonce_size]
    ciphertext = enc[nonce_size:-tag_size]
    tag = enc[-tag_size:]
    cipher = Cipher(algorithms.AES(enc_key), modes.GCM(nonce, tag), backend=default_backend())
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    return plaintext.decode('utf-8')

def main():
    enc_text=input("Enter Cipher text: ")
    key = "just for obfuscation"
    enc_key = key_to_32_bytes(key)
    try:
        plain_text = decrypt(enc_key, enc_text)
        print(f"Plain Text: {plain_text}")
    except Exception as e:
        print(f"Decryption failed: {e}")

if __name__ == "__main__":
    main()